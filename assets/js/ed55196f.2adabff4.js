"use strict";(self.webpackChunk_meridian_cfi_specviz_website=self.webpackChunk_meridian_cfi_specviz_website||[]).push([[636],{3891:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(1085),o=t(1184);const s={tags:["axis","input","note","plane"]},r="Note",a={id:"api/note",title:"Note",description:"The note module enables interactive annotations, selection, modification, and filtering. This module requires Axis, Input, and Plane contexts. See the Basic Annotation demo for guidance.",source:"@site/docs/api/note.mdx",sourceDirName:"api",slug:"/api/note",permalink:"/specviz/docs/api/note",draft:!1,unlisted:!1,tags:[{inline:!0,label:"axis",permalink:"/specviz/docs/tags/axis"},{inline:!0,label:"input",permalink:"/specviz/docs/tags/input"},{inline:!0,label:"note",permalink:"/specviz/docs/tags/note"},{inline:!0,label:"plane",permalink:"/specviz/docs/tags/plane"}],version:"current",frontMatter:{tags:["axis","input","note","plane"]},sidebar:"mainSidebar",previous:{title:"Input",permalink:"/specviz/docs/api/input"},next:{title:"Plane",permalink:"/specviz/docs/api/plane"}},c={},d=[{value:"Components",id:"components",level:3},{value:"Functions",id:"functions",level:3},{value:"Types",id:"types",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"note",children:"Note"})}),"\n",(0,i.jsxs)(n.p,{children:["The note module enables interactive annotations, selection, modification, and filtering. This module requires ",(0,i.jsx)(n.a,{href:"/specviz/docs/api/axis",children:"Axis"}),", ",(0,i.jsx)(n.a,{href:"/specviz/docs/api/input",children:"Input"}),", and ",(0,i.jsx)(n.a,{href:"/specviz/docs/api/plane",children:"Plane"})," contexts. See the ",(0,i.jsx)(n.a,{href:"/specviz/docs/examples/basic-annotation",children:"Basic Annotation"})," demo for guidance."]}),"\n",(0,i.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function Provider(props: ProviderProps): JSX.Element\nfunction Transform(props: TransformProps): JSX.Element\n"})}),"\n",(0,i.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function selectionMode(event: React.MouseEvent): SelectionMode\nfunction useContext<T = Properties>(): Context<T>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'enum SelectionMode {\n  add = "add",\n  invert = "invert",\n  replace = "replace",\n  subtract = "subtract",\n}\n\ntype AnnotationProps<T = Properties> = {\n  children?: (props: AnnotationProps<T>) => JSX.Element\n  dimensions: Vector2.Vector2\n  region: Region<T>\n  selected?: boolean\n  svgProps?: R.SVGProps<SVGSVGElement>\n  viewerId?: string\n}\n\ntype Context<T = Properties> = {\n  canCreate: boolean\n  regions: RegionState<T>\n  selection: SelectionState\n  transformedRegions: RegionState<T>\n  transformedSelection: SelectionState\n  canDelete: (region: Region<T>) => boolean\n  canRead: (region: Region<T>) => boolean\n  canUpdate: (region: Region<T>) => boolean\n  create: (\n    region: Region<T>,\n    options?: {\n      autoSelect?: boolean\n    },\n  ) => void\n  deleteSelection: () => void\n  deselect: () => void\n  moveSelection: (dx: number, dy: number) => void\n  render?: (props: AnnotationProps<T>) => JSX.Element\n  selectArea: (rect: Rect.Rect, selectionMode?: SelectionMode) => void\n  selectId: (id: string, selectionMode?: SelectionMode) => void\n  selectPoint: (pt: Vector2.Vector2, selectionMode?: SelectionMode) => void\n  setRectX: (region: Region<T>, dx: number) => void\n  setRectX1: (region: Region<T>, dx: number) => void\n  setRectX2: (region: Region<T>, dx: number) => void\n  setRectY: (region: Region<T>, dy: number) => void\n  setRectY1: (region: Region<T>, dy: number) => void\n  setRectY2: (region: Region<T>, dy: number) => void\n  setRegions: R.Dispatch<R.SetStateAction<RegionState<T>>>\n  setSelection: R.Dispatch<R.SetStateAction<SelectionState>>\n  updateRegion: (id: string, fn: R.SetStateAction<Region<T>>) => void\n  updateRegionProperties: (\n    id: string,\n    fn: R.SetStateAction<undefined | T>,\n  ) => void\n  updateSelectedRegions: (fn: R.SetStateAction<Region<T>>) => void\n}\n\ntype Properties = Record<string, unknown>\n\ntype ProviderProps = {\n  canCreate?: Context["canCreate"]\n  canDelete?: Context["canDelete"]\n  canRead?: Context["canRead"]\n  canUpdate?: Context["canUpdate"]\n  children: React.ReactNode\n  initRegions?: InitialState<Context["regions"]>\n  initSelection?: InitialState<Context["selection"]>\n  render?: Context["render"]\n}\n\ntype Region<T = Properties> = {\n  id: string\n  x: number\n  y: number\n  width: number\n  height: number\n  xunit: string\n  yunit: string\n  properties?: T\n}\n\ntype RegionState<T = Properties> = Map<Region["id"], Region<T>>\n\ntype SelectionState = Set<Region["id"]>\n\ntype TransformProps = {\n  children: React.ReactNode\n  fn: (regionState: RegionState) => RegionState\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(4041);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);